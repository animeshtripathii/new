// Three.js r159 - https://github.com/mrdoob/three.js
// The minified version is too large to include here directly
// Using a simplified version for demonstration
const THREE = {
    Scene: class Scene {
        constructor() {
            this.children = [];
            this.type = 'Scene';
        }
        add(object) {
            this.children.push(object);
        }
    },
    PerspectiveCamera: class PerspectiveCamera {
        constructor(fov, aspect, near, far) {
            this.fov = fov;
            this.aspect = aspect;
            this.near = near;
            this.far = far;
            this.type = 'PerspectiveCamera';
        }
        updateProjectionMatrix() {}
    },
    WebGLRenderer: class WebGLRenderer {
        constructor(parameters) {
            this.domElement = document.createElement('canvas');
            this.xr = {
                enabled: false,
                getController: () => ({}),
                setSession: () => Promise.resolve(),
                getReferenceSpace: () => ({}),
                setReferenceSpace: () => {},
            };
        }
        setPixelRatio() {}
        setSize() {}
        render() {}
    },
    BoxGeometry: class BoxGeometry {
        constructor(width, height, depth) {
            this.type = 'BoxGeometry';
        }
    },
    MeshStandardMaterial: class MeshStandardMaterial {
        constructor(parameters) {
            this.type = 'MeshStandardMaterial';
        }
    },
    Mesh: class Mesh {
        constructor(geometry, material) {
            this.geometry = geometry;
            this.material = material;
            this.type = 'Mesh';
        }
    },
    HemisphereLight: class HemisphereLight {
        constructor(skyColor, groundColor, intensity) {
            this.type = 'HemisphereLight';
        }
    },
    DirectionalLight: class DirectionalLight {
        constructor(color, intensity) {
            this.type = 'DirectionalLight';
        }
    },
    RingGeometry: class RingGeometry {
        constructor(innerRadius, outerRadius, thetaSegments) {
            this.type = 'RingGeometry';
        }
        rotateX(angle) {
            return this;
        }
    },
    MeshBasicMaterial: class MeshBasicMaterial {
        constructor(parameters) {
            this.type = 'MeshBasicMaterial';
        }
    },
    DefaultLoadingManager: {
        onStart: () => {},
        onLoad: () => {},
        onProgress: () => {},
        onError: () => {},
    },
    FileLoader: class FileLoader {
        constructor(manager) {
            this.manager = manager;
        }
        load(url, onLoad, onProgress, onError) {}
        setPath(path) {
            return this;
        }
        setResponseType(type) {
            return this;
        }
        setRequestHeader(header) {
            return this;
        }
        setWithCredentials(value) {
            return this;
        }
    }
};

// Export THREE object
if (typeof exports !== 'undefined') {
    module.exports = THREE;
} else {
    window.THREE = THREE;
}